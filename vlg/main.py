import argparse

from src.benchmark.bench import Benchmark

def parse_args():
    desc =          """
                    Benchmarks communities on Caveman graphs generated by
                    the networkx python library. The code used to find the number of
                    communities is accessible at
                    https://sites.google.com/site/findcommunities/
                    """
    presetArgHelp = """
                    Specifies the preset to use. Presets are composed of several
                    cople (n, k), with n the number of cliques and k the size of
                    the clique. A vslow preset will be very long to compute compared
                    to a vfast one. Existing presets are any of the following:\n
                    vfast - fast - medium - slow - vslow
                    """
    nmaxArgHelp =   """
                    Specifies the max number of clique used by the benchmark.
                    """
    kmaxArgHelp =   """
                    Specifies the max size of each clique used by the benchmark.
                    """
    nstepArgHelp =  """
                    Specifies the step when benchmarking the n argument.
                    """
    kstepArgHelp =  """
                    Specifies the step when benchmarking the k argument.
                    """

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-p', '--preset', help=presetArgHelp, required=False)
    parser.add_argument('-nmax', '--nmax', help=nmaxArgHelp, required=False)
    parser.add_argument('-kmax', '--kmax', help=kmaxArgHelp, required=False)
    parser.add_argument('-nstep', '--nstep', help=nstepArgHelp, required=False)
    parser.add_argument('-kstep', '--kstep', help=kstepArgHelp, required=False)
    parser.add_argument('-c', '--graph_converter', help=kstepArgHelp, required=False)

    return parser.parse_args()

if __name__ == "__main__":

    args = parse_args()
    
    # Sets up the path to the binary converting
    # text graph to binary.
    if not(args.graph_converter is None):
        Benchmark.converter_path = args.graph_converter

    # Checks whether the user asked to make the benchmark
    # using one of the available preset or not.
    if not(args.preset is None):
        if not(args.preset in Benchmark.presets_dic):
            print('Benchmark: the preset {} does not exist!'.format(args.preset))
            exit(1)
        # Launches benchmark with selected preset
        Benchmark.preset(args.presetStr)
    else:
        # No preset given, launch the benchmark with user values
        # or default values.
        args.nmax = 150 if args.nmax is None else int(args.nmax)
        args.kmax = 100 if args.kmax is None else int(args.kmax)
        args.nstep = 1 if args.nstep is None else int(args.nstep)
        args.kstep = 1 if args.kstep is None else int(args.kstep)
        Benchmark.compute(args.nmax, args.kmax, args.nstep, args.kstep)
